// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  accreditationId  String?
  firstName        String
  lastName         String
  email            String   @unique
  emailVerified    Boolean  @default(false)
  role             ROLE     @default(USER)
  accreditation    String?
  password         String
  company          String?
  job              JOB?

  accounts   Account[]
  sessions   Session[]
  sentEmail  SentEmail[]
  demandes   Demand[]
}

model SentEmail {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        EMAIL_TYPE
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  resetToken  String?
  mfaToken    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tribune {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  stadiumId  String  @db.ObjectId
  name       String
  type       JOB
  places     Int
  image      String
  x          Float
  y          Float

  demands  Demand[]

  stadium Stadium @relation(fields: [stadiumId], references: [id], onDelete: Cascade)

  @@unique([name, stadiumId])
}

model Match {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  // date       DateTime
  date       String
  time       String
  phase      PHASE 
  stadiumId  String  @db.ObjectId
  image      String

  matchTeams  MatchTeam[]
  demands     Demand[]

  stadium Stadium @relation(fields: [stadiumId], references: [id], onDelete: Cascade)

  @@unique([date, stadiumId])
  @@index([date])
}

model MatchTeam {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId  String   @db.ObjectId
  team     String
  result   RESULT?

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, team])
}

model Stadium {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  reference  String
  image      String

  tribunes  Tribune[]
  matches   Match[]

  @@unique([name, reference])
  @@index([reference])
}

model Team {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  country  COUNTIES  @unique
  phase    PHASE
}

model Demand {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  matchId    String    @db.ObjectId
  tribuneId  String    @db.ObjectId
  state      STATE
  createdAt  DateTime  @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match    Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  tribune  Tribune  @relation(fields: [tribuneId], references: [id], onDelete: Cascade)

  @@unique([userId, tribuneId, matchId])
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expire_at          Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String    @unique
  userId       String    @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier   String
  token        String    @unique
  expires      DateTime

  @@unique([identifier, token])
}

enum JOB {
  JOURNALIST
  PHOTOGRAPHER
}

enum ROLE {
  DEV
  ADMIN
  USER
}

enum PARENT_TYPE {
  STADIUM
  TRIBUNE
}

enum PHASE {
  POULE_A
  POULE_B
  POULE_C
  POULE_D
  QUARTERFINAL
  SEMI_FINAL
  FINAL
}

enum EMAIL_TYPE {
  RESET
  MFA
}

enum STATE {
  ACCEPTED
  IN_PROGRESS
  REJECTED
}

enum RESULT {
  WINNER
  LOSER
  NULL
}

enum COUNTIES {
  NEW_ZEALAND
  FRANCE
  ITALY
  URUGUAY
  NAMIBIA
  SOUTH_AFRICA
  IRELAND
  SCOTLAND
  TONGA
  ROMANIA
  WALES
  AUSTRALIA
  FIJI
  GEORGIA
  PORTUGAL
  ENGLAND
  JAPAN
  ARGENTINA
  SAMOA
  CHILI
}