// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Job {
  JOURNALIST
  PHOTOGRAPHER
}

enum Role {
  DEV
  ADMIN
  USER
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  accreditationId  String?
  firstName        String
  lastName         String
  email            String   @unique
  emailVerified    Boolean  @default(false)
  role             Role     @default(USER)
  accreditation    String?
  hashedPassword   String
  company          String?
  job              Job?

  accounts   Account[]
  sessions   Session[]
  sentEmail  SentEmail[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expire_at          Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String    @unique
  userId       String    @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier   String
  token        String    @unique
  expires      DateTime

  @@unique([identifier, token])
}

enum Type {
  RESET
  MFA
}

model SentEmail {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type Type
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  resetToken  String?
  mfaToken    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}